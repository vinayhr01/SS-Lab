 /* 
 8. Design, develop and implement a C/C++/Java program to implement Bankerâ€™s 
 algorithm. Assume suitable input required to demonstrate the results.
 */ 
  
 import java.util.Scanner;

public class a {
    private int rem_need[][], allocate[][], max[][], avail[][], nProcess, nResource;

    private void input() {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter no. of processes and resources : ");
        nProcess = sc.nextInt();
        // no. of process
        nResource = sc.nextInt();
        // no. of resources

        rem_need = new int[nProcess][nResource];
        max = new int[nProcess][nResource];
        allocate = new int[nProcess][nResource];

        avail = new int[1][nResource];

        System.out.println("Enter allocation matrix -->");
        for (int i = 0; i < nProcess; i++)
            for (int j = 0; j < nResource; j++)
                allocate[i][j] = sc.nextInt();
        // allocation matrix

        System.out.println("Enter max matrix -->");
        for (int i = 0; i < nProcess; i++)
            for (int j = 0; j < nResource; j++)
                max[i][j] = sc.nextInt();
        // max matrix

        System.out.println("Enter available matrix -->");
        for (int j = 0; j < nResource; j++)
            avail[0][j] = sc.nextInt();
        // available matrix
        sc.close();
    }

    private int[][] calc_need() {
        for (int i = 0; i < nProcess; i++)
            for (int j = 0; j < nResource; j++)
                // calculating remaining need matrix
                rem_need[i][j] = max[i][j] - allocate[i][j];
        return rem_need;
    }

    private boolean check(int i) {
        // checking if all resources for ith process can be allocated
        for (int j = 0; j < nResource; j++)
            if (avail[0][j] < rem_need[i][j])
                return false;
        return true;
    }

    public void isSafe() {
        input();
        calc_need();
        boolean done[] = new boolean[nProcess];
        int j = 0;
        while (j < nProcess) {
            // until all process allocated
            boolean allocated = false;
            for (int i = 0; i < nProcess; i++)
                if (!done[i] && check(i)) {
                    // trying to allocate
                    for (int k = 0; k < nResource; k++)
                        avail[0][k] = avail[0][k] - rem_need[i][k] + max[i][k];
                    System.out.println("Allocated process : " + i);
                    allocated = done[i] = true;
                    j++;
                }
            if (!allocated)
                break;
            // if no allocation
        }
        if (j == nProcess)
            // if all processes are allocated
            System.out.println("\nSafely allocated");
        else
            System.out.println("All process cant be allocated safely");
    }

    public static void main(String[] args) {
        new a().isSafe();
    }
}


/* Output:-

Enter no. of processes and resources : 3 4
Enter allocation matrix -->
1 2 2 1
1 0 3 3
1 2 1 0
Enter max matrix -->
3 3 2 2
1 1 3 4
1 3 5 0
Enter available matrix -->
3 1 1 2
Allocated process : 0
Allocated process : 1
Allocated process : 2

Safely allocated

*/
